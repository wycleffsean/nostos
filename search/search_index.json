{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Nostos","text":"<p>A functional package manager for Kubernetes \u2014 Nix\u2011like expressions, Terraform\u2011style graph diffs, and a kubectl\u2011aware LSP.</p> <p>Get Started See Demos</p>"},{"location":"#why-nostos","title":"Why Nostos?","text":"<ul> <li>Expression\u2011oriented language (YAML\u2011like surface, Nix\u2011like semantics) yields typed Kubernetes specs.</li> <li>Graph diff &amp; apply: compute changes and apply them transactionally, Terraform\u2011style.</li> <li>Batteries\u2011included LSP: completions, hovers, go\u2011to, plus Kubernetes type/spec intelligence.</li> </ul>"},{"location":"#odyssey-files-project-entrypoint","title":"Odyssey files (project entrypoint)","text":"<p><code>odyssey.no</code> defines cluster \u2192 namespaces \u2192 resources. Example:</p> <pre><code>let\n  redisService: import(./redis-service.no)\n  redisDeployment: import(./redis-deployment.no)\nin\ndo-nyc1-k8s-1-33-1-do-0-nyc1-1750371119772:\n  default:\n  - redisService\n  - redisDeployment\n</code></pre> <p>Nostos evaluates the file into a graph of resources, diffs it against the live cluster, and plans/applies the delta.</p>"},{"location":"#what-nostos-replaces","title":"What Nostos replaces","text":"<p>Nostos aims to consolidate your toolchain:</p> <ul> <li>Helm \u2192 declarative packaging without templates.</li> <li>Terraform (for k8s) \u2192 planning &amp; applying infra\u2011safe diffs.</li> <li>kubectl \u2192 CRUD, but type\u2011safe and project\u2011scoped.</li> </ul>"},{"location":"#quick-links","title":"Quick links","text":"<ul> <li>Getting Started</li> <li>Odyssey File Format</li> <li>CLI: diff, plan, apply</li> <li>Language &amp; LSP</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#install","title":"Install","text":"<p>TODO: replace with your actual install instructions.</p> <pre><code># Example (adjust accordingly):\ngo install github.com/&lt;your-gh-username&gt;/nostos/cmd/nostos@latest\n</code></pre>"},{"location":"getting-started/#create-a-project","title":"Create a project","text":"<pre><code>mkdir my-app &amp;&amp; cd my-app\nprintf '%s\\n' \"let\\n  redisService: import(./redis-service.no)\\n  redisDeployment: import(./redis-deployment.no)\\nin\\nmy-cluster:\\n  default:\\n  - redisService\\n  - redisDeployment\" &gt; odyssey.no\n</code></pre>"},{"location":"getting-started/#dryrun-and-apply","title":"Dry\u2011run and apply","text":"<pre><code># Show what's different between workspace and cluster\nnostos diff --workspace-dir .\n\n# Review a Terraform\u2011style plan\nnostos plan --workspace-dir .\n\n# Apply the changes\nnostos apply --workspace-dir .\n</code></pre> <p>See CLI for details and flags.</p>"},{"location":"lsp/","title":"Language &amp; LSP","text":"<p>Nostos ships an LSP server to supercharge your editor with:</p> <ul> <li>Completions, hovers, go\u2011to definition, diagnostics</li> <li>Type information for Nostos language values</li> <li>Kubernetes spec awareness (field types, enums, required props)</li> </ul>"},{"location":"lsp/#starting-the-server","title":"Starting the server","text":"<pre><code>nostos lsp --stdio\n</code></pre> <p>Point your editor's LSP client to <code>nostos lsp --stdio</code>. Most editors (VS Code, Neovim, Kakoune via kak-lsp, etc.) support stdio LSP servers.</p>"},{"location":"lsp/#demo-placeholder","title":"Demo (placeholder)","text":"<p>Below is a slot for an offline Asciinema\u2011recorded session or an MP4 generated with Charm's VHS. Drop your file(s) into <code>docs/assets/demos/</code> and adjust the <code>src</code>.</p>"},{"location":"odyssey/","title":"Odyssey Files","text":"<p>An <code>odyssey.no</code> file is the entrypoint for a Nostos project. The top\u2011level keys map to kubectl contexts/clusters. Each cluster key contains namespaces; each namespace lists the resources to materialize.</p> <pre><code>let\n  svc: import(./svc.no)\n  deploy: import(./deploy.no)\nin\nmy-cluster:\n  default:\n  - svc\n  - deploy\n</code></pre> <ul> <li><code>let \u2026 in</code> binds local names to imported modules/resources (Nix\u2011style).</li> <li>Cluster key (<code>my-cluster</code>) is inferred as the kubectl context/cluster.</li> <li>Namespace (<code>default</code>) groups resources for that namespace.</li> <li>Resource list are expressions that evaluate to Kubernetes specs.</li> </ul> <p>Nostos evaluates the file into a typed graph using built\u2011in Kubernetes type information plus CRDs discovered from the cluster. The resulting graph is diffed against live state to produce a safe plan.</p>"},{"location":"commands/apply/","title":"<code>nostos apply</code>","text":"<p>Apply the planned changes to the cluster.</p> <pre><code>nostos apply --workspace-dir .\n</code></pre> <ul> <li>Executes the dependency\u2011ordered operations</li> <li>Reports progress and errors clearly</li> <li>Supports idempotent re\u2011runs</li> </ul>"},{"location":"commands/diff/","title":"<code>nostos diff</code>","text":"<p>Show differences between the evaluated workspace and the live cluster.</p> <pre><code>nostos diff --workspace-dir ./envs/prod\n</code></pre> <ul> <li>Evaluates <code>odyssey.no</code> and imports to build the resource graph</li> <li>Compares to cluster state reachable via current kubecontext</li> <li>Prints a human\u2011readable diff</li> </ul>"},{"location":"commands/plan/","title":"<code>nostos plan</code>","text":"<p>Produce a Terraform\u2011style plan showing the actions that would be taken.</p> <pre><code>nostos plan --workspace-dir .\n</code></pre> <ul> <li>Creates a graph diff (create/replace/update/delete)</li> <li>Orders operations to satisfy dependencies</li> <li>No changes are applied</li> </ul>"},{"location":"demos/","title":"Demos","text":"<p>Record once, replay offline. Two good options:</p> <ul> <li>Asciinema \u2192 compact <code>.cast</code> files + web player (embed below)</li> <li>Charm VHS \u2192 deterministic scripts \u2192 <code>.gif</code>/<code>.mp4</code></li> </ul>"},{"location":"demos/#asciinema-offline","title":"Asciinema (offline)","text":"<ol> <li>Record:    <pre><code>asciinema rec -q -c \"nostos plan --workspace-dir .\" ./docs/assets/demos/plan.cast\n</code></pre></li> <li>Commit the <code>.cast</code> file and vendor the player assets (see below).</li> </ol> <p>Embed:</p>"},{"location":"demos/#vhs-gifmp4","title":"VHS (GIF/MP4)","text":"<ol> <li>Create a tape script, e.g. <code>demos/plan.tape</code> (a starter is generated in this repo).</li> <li>Render:    <pre><code>vhs demos/plan.tape # creates demos/plan.gif and demos/plan.mp4\ncp demos/plan.mp4 docs/assets/demos/\n</code></pre></li> </ol> <p>Embed:</p>"},{"location":"demos/#vendoring-asciinema-player-for-offline-playback","title":"Vendoring Asciinema player for offline playback","text":"<p>Fetch once and commit:</p> <pre><code>curl -L -o docs/assets/asciinema/asciinema-player.css \\\n  https://cdn.jsdelivr.net/npm/asciinema-player@3.8.0/dist/bundle/asciinema-player.css\ncurl -L -o docs/assets/asciinema/asciinema-player.js \\\n  https://cdn.jsdelivr.net/npm/asciinema-player@3.8.0/dist/bundle/asciinema-player.js\n</code></pre> <p>These are MIT\u2011licensed. After committing, playback works with no external CDN.</p>"}]}